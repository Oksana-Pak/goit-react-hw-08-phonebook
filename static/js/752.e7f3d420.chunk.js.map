{"version":3,"file":"static/js/752.e7f3d420.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/LoginForm/LoginForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.styled.js","components/EditContactForm/EditContactForm.jsx","components/ContactModal/ContactModal.styled.js","components/ContactModal/ContactModal.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport { Button } from '../LoginForm/LoginForm.styled';\n\nexport const FormikForm = styled(Form)`\n  width: 50%;\n  margin: 0 auto;\n  background: rgba(255, 255, 255, 0.3);\n  padding: 20px;\n  border-radius: 20px;\n  border-left: 1px solid rgba(255, 255, 255, 0.3);\n  border-top: 1px solid rgba(255, 255, 255, 0.3);\n  backdrop-filter: blur(10px);\n  box-shadow: 20px 20px 40px -6px rgba(0, 0, 0, 0.2);\n  text-align: center;\n`;\n\nexport const FormikLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  color: #fff;\n  opacity: 0.7;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n`;\nexport const FormikInput = styled(Field)`\n  width: 60%;\n  padding: 15px;\n  margin: 0 auto;\n  margin-bottom: 10px;\n  font-weight: 500;\n  color: #fff;\n  background: transparent;\n  border: none;\n  border-left: 1px solid rgba(255, 255, 255, 0.3);\n  border-top: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 25px;\n  backdrop-filter: blur(5px);\n  box-shadow: 4px 4px 60px rgba(0, 0, 0, 0.2);\n\n  transition: all 0.2s ease-in-out;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n\n  &:hover {\n    background: rgba(255, 255, 255, 0.1);\n    box-shadow: 4px 4px 60px 8px rgba(0, 0, 0, 0.2);\n  }\n\n  &:focus {\n    background: rgba(255, 255, 255, 0.1);\n    box-shadow: 4px 4px 60px 8px rgba(0, 0, 0, 0.2);\n    outline: none;\n  }\n`;\nexport const FormikError = styled(ErrorMessage)`\n  font-weight: 700;\n  color: red;\n  margin: 0;\n`;\n\nexport const ButtonStyled = styled(Button)`\n  width: 50%;\n  margin-top: 20px;\n`;\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const Container = styled.div`\n  width: 25%;\n  position: absolute;\n  transform: translate(-50%, -50%);\n  top: 55%;\n  left: 50%;\n`;\nexport const FormikForm = styled(Form)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  background: rgba(255, 255, 255, 0.3);\n  padding: 45px;\n  border-radius: 20px;\n  border-left: 1px solid rgba(255, 255, 255, 0.3);\n  border-top: 1px solid rgba(255, 255, 255, 0.3);\n  backdrop-filter: blur(10px);\n  box-shadow: 20px 20px 40px -6px rgba(0, 0, 0, 0.2);\n  text-align: center;\n  transition: all 0.2s ease-in-out;\n  &:hover {\n    margin: 4px;\n  }\n`;\nexport const FormTitle = styled.p`\n  font-weight: 500;\n  color: #fff;\n  opacity: 0.7;\n  font-size: 24px;\n  margin-top: 0;\n  margin-bottom: 40px;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n`;\nexport const FormikInput = styled(Field)`\n  width: 85%;\n  margin: 15px auto;\n  padding: 15px;\n  font-weight: 500;\n  color: #fff;\n  background: transparent;\n  border: none;\n  border-left: 1px solid rgba(255, 255, 255, 0.3);\n  border-top: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 25px;\n  backdrop-filter: blur(5px);\n  box-shadow: 4px 4px 60px rgba(0, 0, 0, 0.2);\n\n  transition: all 0.2s ease-in-out;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n\n  &:hover {\n    background: rgba(255, 255, 255, 0.1);\n    box-shadow: 4px 4px 60px 8px rgba(0, 0, 0, 0.2);\n  }\n\n  &:focus {\n    background: rgba(255, 255, 255, 0.1);\n    box-shadow: 4px 4px 60px 8px rgba(0, 0, 0, 0.2);\n    outline: none;\n  }\n  &::placeholder {\n    font-weight: 400;\n    color: #fff;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);\n  }\n`;\n\nexport const Button = styled.button`\n  margin: 15px auto 0;\n  width: 80%;\n  padding: 15px;\n  font-weight: 500;\n  font-size: 16px;\n  color: #fff;\n  background: transparent;\n  border: none;\n  border-left: 1px solid rgba(255, 255, 255, 0.3);\n  border-top: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 25px;\n  backdrop-filter: blur(5px);\n  box-shadow: 4px 4px 60px rgba(0, 0, 0, 0.2);\n  transition: all 0.2s ease-in-out;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n\n  &:hover {\n    background: rgba(255, 255, 255, 0.1);\n    box-shadow: 4px 4px 60px 8px rgba(0, 0, 0, 0.2);\n    cursor: pointer;\n  }\n`;\n\nconst Drop = styled.div`\n  background: rgba(255, 255, 255, 0.3);\n  backdrop-filter: blur(10px);\n  border-radius: 10px;\n  border-left: 1px solid rgba(255, 255, 255, 0.3);\n  border-top: 1px solid rgba(255, 255, 255, 0.3);\n  box-shadow: 10px 10px 60px -8px rgba(0, 0, 0, 0.2);\n  position: absolute;\n  transition: all 0.2s ease;\n`;\nexport const DropFirst = styled(Drop)`\n  height: 80px;\n  width: 80px;\n  top: -20px;\n  left: -40px;\n  z-index: -1;\n`;\n\nexport const DropSecond = styled(Drop)`\n  height: 80px;\n  width: 80px;\n  bottom: -30px;\n  right: -10px;\n`;\nexport const DropThird = styled(Drop)`\n  height: 100px;\n  width: 100px;\n  bottom: 120px;\n  right: -50px;\n  z-index: -1;\n`;\n\nexport const DropForth = styled(Drop)`\n  height: 120px;\n  width: 120px;\n  top: -60px;\n  right: -60px;\n`;\nexport const DropFifth = styled(Drop)`\n  height: 60px;\n  width: 60px;\n  bottom: 170px;\n  left: 90px;\n  z-index: -1;\n`;\n","export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = state => {\n  const contacts = selectContacts(state);\n  const filter = selectFilter(state);\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase())\n  );\n};\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectEditContact = state => state.contacts.editContact;\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport {\n  errorMessage,\n  successMessage,\n} from 'components/services/notifications';\n\nimport {\n  FormikForm,\n  FormikLabel,\n  FormikInput,\n  FormikError,\n  ButtonStyled,\n} from './ContactForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    )\n    .required('name is a required field'),\n  number: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('number is a required field'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const checkContact = name => contacts.find(contact => name === contact.name);\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (checkContact(values.name)) {\n      errorMessage(`Sorry, the contact ${values.name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact(values));\n    successMessage(`${values.name} is added to contacts`);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormikForm>\n        <FormikLabel htmlFor=\"name\">\n          Name\n          <FormikInput type=\"text\" name=\"name\" />\n          <FormikError name=\"name\" component=\"p\" />\n        </FormikLabel>\n        <FormikLabel htmlFor=\"number\">\n          Number\n          <FormikInput type=\"tel\" name=\"number\" />\n          <FormikError name=\"number\" component=\"p\" />\n        </FormikLabel>\n        <ButtonStyled type=\"submit\">Add contact</ButtonStyled>\n      </FormikForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 50%;\n  height: 80px;\n  margin: 0 auto;\n  padding: 15px;\n  background: rgba(255, 255, 255, 0.3);\n  border-radius: 20px;\n  border-left: 1px solid rgba(255, 255, 255, 0.3);\n  border-top: 1px solid rgba(255, 255, 255, 0.3);\n  backdrop-filter: blur(10px);\n  box-shadow: 20px 20px 40px -6px rgba(0, 0, 0, 0.2);\n  text-align: center;\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  color: #fff;\n  opacity: 0.7;\n  gap: 5px;\n`;\n\nexport const InputStyled = styled.input`\n  position: relative;\n  width: 60%;\n  margin: 0 auto 35px;\n  padding: 15px;\n  font-weight: 500;\n  color: #fff;\n  background: transparent;\n  border: none;\n  border-left: 1px solid rgba(255, 255, 255, 0.3);\n  border-top: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 25px;\n  backdrop-filter: blur(5px);\n  box-shadow: 4px 4px 60px rgba(0, 0, 0, 0.2);\n\n  transition: all 0.2s ease-in-out;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n\n  &:hover {\n    background: rgba(255, 255, 255, 0.1);\n    box-shadow: 4px 4px 60px 8px rgba(0, 0, 0, 0.2);\n  }\n\n  &:focus {\n    background: rgba(255, 255, 255, 0.1);\n    box-shadow: 4px 4px 60px 8px rgba(0, 0, 0, 0.2);\n    outline: none;\n  }\n  &::placeholder {\n    font-weight: 400;\n    color: #fff;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Label } from './Filter.styled';\nimport { Form, InputStyled } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectFilter);\n\n  const changeFilter = value => {\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <Form>\n      <Label htmlFor=\"filter\">\n        Find contact by name\n        <InputStyled\n          type=\"text\"\n          name=\"filter\"\n          value={value}\n          onChange={e => changeFilter(e.target.value)}\n        />\n      </Label>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\nimport { Button } from '../LoginForm/LoginForm.styled';\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 15px;\n\n  color: #ffffff;\n  opacity: 0.8;\n`;\nexport const Text = styled.p`\n  width: 25%;\n`;\n\nexport const ButtonWrap = styled.div`\n  width: 25%;\n  display: flex;\n  justify-content: space-between;\n`;\nexport const ButtonStyled = styled(Button)`\n  width: 45%;\n  margin: 0;\n  padding: 5px;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { successMessage } from 'components/services/notifications';\nimport { Item, Text, ButtonWrap, ButtonStyled } from './ContactItem.styled';\nimport { changeContact } from 'redux/contacts/contactsSlice';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n    successMessage(`${name} was delete from contacts`);\n  };\n  const handleEditContact = () => {\n    dispatch(changeContact({ id, name, number }));\n  };\n  return (\n    <Item>\n      <Text>{name}</Text>\n      <Text>{number}</Text>\n      <ButtonWrap>\n        <ButtonStyled onClick={handleEditContact}>Edit</ButtonStyled>\n        <ButtonStyled onClick={handleDelete}>Delete</ButtonStyled>\n      </ButtonWrap>\n    </Item>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ContactContainer = styled.ul`\n  margin: 15px auto 0;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  background: transparent;\n  border: none;\n  border-left: 1px solid rgba(255, 255, 255, 0.3);\n  border-top: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 25px;\n  backdrop-filter: blur(5px);\n  box-shadow: 4px 4px 60px rgba(0, 0, 0, 0.2);\n`;\n","import { useSelector } from 'react-redux';\n\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { ContactItem } from '../ContactItem';\nimport { ContactContainer } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n\n  return (\n    <ContactContainer>\n      {contacts.length > 0 &&\n        contacts.map(({ id, name, number }) => (\n          <ContactItem key={id} id={id} name={name} number={number} />\n        ))}\n    </ContactContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.section`\n  max-width: 50%;\n  margin: 0 auto;\n  padding: 20px;\n`;\nexport const ContactTitle = styled.h3`\n  font-size: 26px;\n  text-align: center;\n  color: #ffffff;\n  opacity: 0.7;\n  margin: 0 auto 40px;\n`;\nexport const ContactSubtitle = styled.h4`\n  font-size: 20px;\n  text-align: center;\n  color: #ffffff;\n  opacity: 0.7;\n`;\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectEditContact } from 'redux/contacts/selectors';\nimport { updateContact } from 'redux/contacts/operations';\nimport { changeContact } from 'redux/contacts/contactsSlice';\nimport { successMessage } from 'components/services/notifications';\n\nimport {\n  FormikForm,\n  FormikLabel,\n  FormikInput,\n  FormikError,\n  ButtonStyled,\n} from '../ContactForm/ContactForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    )\n    .required('name is a required field'),\n  number: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('number is a required field'),\n});\n\nexport const EditContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const { id, name, number } = useSelector(selectEditContact);\n  const initialValues = {\n    id,\n    name,\n    number,\n  };\n  const checkContact = values =>\n    contacts.find(\n      contact =>\n        values.name === contact.name && values.number === contact.number\n    );\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (checkContact(values)) {\n      dispatch(changeContact());\n      return;\n    }\n\n    dispatch(updateContact(values));\n\n    successMessage(`${values.name} was changed in contacts`);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormikForm>\n        <FormikLabel htmlFor=\"name\">\n          Name\n          <FormikInput type=\"text\" name=\"name\" />\n          <FormikError name=\"name\" component=\"p\" />\n        </FormikLabel>\n        <FormikLabel htmlFor=\"number\">\n          Number\n          <FormikInput type=\"tel\" name=\"number\" />\n          <FormikError name=\"number\" component=\"p\" />\n        </FormikLabel>\n        <ButtonStyled type=\"submit\">Change contact</ButtonStyled>\n      </FormikForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n`;\n\nexport const ModalContainer = styled.div`\n  width: 50%;\n`;\n","import { EditContactForm } from 'components/EditContactForm';\nimport { Overlay, ModalContainer } from './ContactModal.styled';\n\nexport const ContactModal = () => {\n  return (\n    <Overlay>\n      <ModalContainer>\n        <EditContactForm />\n      </ModalContainer>\n    </Overlay>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectError,\n  selectIsLoading,\n  selectContacts,\n  selectEditContact,\n} from 'redux/contacts/selectors';\nimport { ContactForm } from 'components/ContactForm';\nimport { Filter } from 'components/Filter';\nimport { ContactList } from 'components/ContactList';\nimport {\n  Container,\n  ContactTitle,\n  ContactSubtitle,\n} from './ContactsPage.styled';\nimport { Loader } from 'components/Loader';\nimport { ContactModal } from 'components/ContactModal';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const editContact = useSelector(selectEditContact);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <ContactTitle>Phone Book</ContactTitle>\n      <ContactForm />\n      {isLoading && !error && <Loader />}\n      {contacts.length > 0 && (\n        <>\n          <ContactSubtitle>Contacts</ContactSubtitle>\n          <Filter />\n          <ContactList />\n        </>\n      )}\n      {editContact && <ContactModal />}\n    </Container>\n  );\n};\nexport default ContactsPage;\n"],"names":["FormikForm","styled","Form","FormikLabel","FormikInput","Field","FormikError","ErrorMessage","ButtonStyled","Button","Container","FormTitle","Drop","DropFirst","DropSecond","DropThird","DropForth","DropFifth","selectContacts","state","contacts","items","selectFilter","filter","selectFilteredContacts","name","toLowerCase","includes","selectIsLoading","isLoading","selectError","error","selectEditContact","editContact","schema","yup","shape","matches","required","number","initialValues","ContactForm","dispatch","useDispatch","useSelector","validationSchema","onSubmit","values","resetForm","find","contact","errorMessage","addContact","successMessage","htmlFor","type","component","Label","InputStyled","Filter","value","onChange","e","setFilter","changeFilter","target","Item","Text","ButtonWrap","ContactItem","id","onClick","changeContact","deleteContact","ContactContainer","ContactList","length","map","ContactTitle","ContactSubtitle","EditContactForm","checkContact","updateContact","Overlay","ModalContainer","ContactModal","useEffect","fetchContacts","Loader"],"sourceRoot":""}